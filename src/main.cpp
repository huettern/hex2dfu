/*
 * @file main.cpp
 *
 * @author Noah Huetter <noahhuetter@gmail.com>
 *
*/

#include <iostream>
#include <string.h>
#include <stdio.h>

#include <unistd.h>
#include <sys/stat.h>

#include "../inc/dfu_write.h"
#include "../inc/cintelhex.h"

using namespace std;

int main(int argc, char **argv)
{
    char *inFileName = NULL;
    char *outFileName = NULL;
    int index;
    int c;
    uint32_t lwStartAdr;
    uint8_t TargetNameTest [255] = { 0x53,0x54,0x2E,0x2E,0x2E,0x00,0x3A,0x5C,0x00,0x73,0x65,0x72,0x73,0x5C,0x4D,0x4D,0x45,0x5A,0x4E,0x48,0x55,0x5C,0x6F,0x77,0x6E,0x43,0x6C,0x6F,0x75,0x64,0x5C,0x50,0x72,0x6F,0x67,0x72,0x61,0x6D,0x6D,0x69,0x6E,0x67,0x5C,0x53,0x54,0x4D,0x33,0x32,0x46,0x33,0x37,0x33,0x73,0x74,0x69,0x63,0x6B,0x5C,0x73,0x77,0x5C,0x63,0x75,0x62,0x65,0x5C,0x74,0x61,0x72,0x67,0x65,0x74,0x5C,0x68,0x69,0x64,0x5F,0x73,0x71,0x75,0x61,0x72,0x65,0x2E,0x64,0x66,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

    struct stat buffer;


    /* parse arguments */
    while ((c = getopt (argc, argv, "ao:i:")) != -1)
    {
        switch (c)
        {
            case 'o':
                outFileName = optarg;
                break;
            case 'i':
                inFileName = optarg;
                break;
            case '?':
                if (optopt == 'o')
                    printf ("Option -%c: Specify output file.\n", optopt);
                else if (optopt == 'i')
                    printf ("Option -%c: Specify input file.\n", optopt);
                else if (isprint (optopt))
                    printf ("Unknown option `-%c'.\n", optopt);
                else
                    printf ("Unknown option character `\\x%x'.\n", optopt);
                return 1;
            default:
                abort ();
        }
    }


    for (index = optind; index < argc; index++)
        printf ("Non-option argument %s\n", argv[index]);

    //check if the minimum arguments are here
    if( (outFileName == NULL) || (inFileName == NULL) )
    {
        printf ("Error: Specify input and output file using -i and -o\n");
        return 1;
    }

    if( stat(inFileName, &buffer) != 0 )
    {
        printf ("Error: Inputfile \"%s\" not found!\n", inFileName);
        return 1;
    }

    printf ("outFileName = %s \ninFileName = %s\n", outFileName, inFileName);

    cout << "Starting.." << endl;

    DFU_tsImageInfo  sImageInfo  = fNewImageInfo(outFileName);
    DFU_tsTargetInfo sTargetInfo = fNewTargetInfo();


    cout << "Reading hex input file" << endl;
    ihex_recordset_t *hexrec = ihex_rs_from_file(inFileName);
    if(hexrec == NULL) return 42;
    uint32_t min, max;
    ihex_rs_get_address_range(hexrec, &min, &max);
    printf("ihex_recordset_count: %d\n", hexrec->ihrs_count);
    printf("ihex_recordset_adr_max: %d\n", max);
    printf("ihex_recordset_adr_min: %d\n", min);

    cout << "try to allocate memory great enough to hold the program memory data" << endl;
    uint8_t *bProgDatBuf = (uint8_t*) calloc(max, sizeof(uint8_t));
    cout << "Copy data to target region." << endl;
    (void)ihex_mem_copy(hexrec, bProgDatBuf, max, IHEX_WIDTH_8BIT, IHEX_ORDER_BIGENDIAN);

    cout << "Searching first Record that's not 0x00" << endl;
    for(lwStartAdr = 0; bProgDatBuf[lwStartAdr] == 0; lwStartAdr++);
    printf("First Datafield thats not 0x00 is at %#010x\n", lwStartAdr);


    cout << "Writing Prefix.." << endl;
    fBuildPrefix(&sImageInfo);

    cout << "Writing Target.." << endl;
    sImageInfo.bNumOfTargets = 1;
    sTargetInfo.lwNumOfElements = 1;
    sTargetInfo.lwStartAdr = lwStartAdr;
    sTargetInfo.lwTargetSize = max-lwStartAdr;
    sTargetInfo.pbImage = bProgDatBuf;
    memcpy(&sTargetInfo.szTargetName, TargetNameTest, sizeof(TargetNameTest));

    fBuildTarget(&sImageInfo, &sTargetInfo);

    cout << "Writing Suffix.." << endl;
    fBuildSuffix(&sImageInfo);

    cout << "Finished!" << endl;


    return 0;
}
